Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIV
    ELSE
    IF
    MULT
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> INT MAIN LPAREN RPAREN LBRACE stmt_list RBRACE
Rule 2     stmt_list -> stmt
Rule 3     stmt_list -> stmt_list stmt
Rule 4     stmt -> INT ID ASSIGN expr SEMI
Rule 5     stmt -> RETURN expr SEMI
Rule 6     expr -> expr PLUS expr
Rule 7     expr -> expr MINUS expr
Rule 8     expr -> NUMBER
Rule 9     expr -> ID

Terminals, with rules where they appear

ASSIGN               : 4
DIV                  : 
ELSE                 : 
ID                   : 4 9
IF                   : 
INT                  : 1 4
LBRACE               : 1
LPAREN               : 1
MAIN                 : 1
MINUS                : 7
MULT                 : 
NUMBER               : 8
PLUS                 : 6
RBRACE               : 1
RETURN               : 5
RPAREN               : 1
SEMI                 : 4 5
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expr                 : 4 5 6 6 7 7
program              : 0
stmt                 : 2 3
stmt_list            : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INT MAIN LPAREN RPAREN LBRACE stmt_list RBRACE

    INT             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> INT . MAIN LPAREN RPAREN LBRACE stmt_list RBRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> INT MAIN . LPAREN RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 4


state 4

    (1) program -> INT MAIN LPAREN . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 5


state 5

    (1) program -> INT MAIN LPAREN RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 6


state 6

    (1) program -> INT MAIN LPAREN RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt_list stmt
    (4) stmt -> . INT ID ASSIGN expr SEMI
    (5) stmt -> . RETURN expr SEMI

    INT             shift and go to state 7
    RETURN          shift and go to state 10

    stmt_list                      shift and go to state 8
    stmt                           shift and go to state 9

state 7

    (4) stmt -> INT . ID ASSIGN expr SEMI

    ID              shift and go to state 11


state 8

    (1) program -> INT MAIN LPAREN RPAREN LBRACE stmt_list . RBRACE
    (3) stmt_list -> stmt_list . stmt
    (4) stmt -> . INT ID ASSIGN expr SEMI
    (5) stmt -> . RETURN expr SEMI

    RBRACE          shift and go to state 12
    INT             shift and go to state 7
    RETURN          shift and go to state 10

    stmt                           shift and go to state 13

state 9

    (2) stmt_list -> stmt .

    RBRACE          reduce using rule 2 (stmt_list -> stmt .)
    INT             reduce using rule 2 (stmt_list -> stmt .)
    RETURN          reduce using rule 2 (stmt_list -> stmt .)


state 10

    (5) stmt -> RETURN . expr SEMI
    (6) expr -> . expr PLUS expr
    (7) expr -> . expr MINUS expr
    (8) expr -> . NUMBER
    (9) expr -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expr                           shift and go to state 14

state 11

    (4) stmt -> INT ID . ASSIGN expr SEMI

    ASSIGN          shift and go to state 17


state 12

    (1) program -> INT MAIN LPAREN RPAREN LBRACE stmt_list RBRACE .

    $end            reduce using rule 1 (program -> INT MAIN LPAREN RPAREN LBRACE stmt_list RBRACE .)


state 13

    (3) stmt_list -> stmt_list stmt .

    RBRACE          reduce using rule 3 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 3 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 3 (stmt_list -> stmt_list stmt .)


state 14

    (5) stmt -> RETURN expr . SEMI
    (6) expr -> expr . PLUS expr
    (7) expr -> expr . MINUS expr

    SEMI            shift and go to state 18
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 15

    (8) expr -> NUMBER .

    SEMI            reduce using rule 8 (expr -> NUMBER .)
    PLUS            reduce using rule 8 (expr -> NUMBER .)
    MINUS           reduce using rule 8 (expr -> NUMBER .)


state 16

    (9) expr -> ID .

    SEMI            reduce using rule 9 (expr -> ID .)
    PLUS            reduce using rule 9 (expr -> ID .)
    MINUS           reduce using rule 9 (expr -> ID .)


state 17

    (4) stmt -> INT ID ASSIGN . expr SEMI
    (6) expr -> . expr PLUS expr
    (7) expr -> . expr MINUS expr
    (8) expr -> . NUMBER
    (9) expr -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expr                           shift and go to state 21

state 18

    (5) stmt -> RETURN expr SEMI .

    RBRACE          reduce using rule 5 (stmt -> RETURN expr SEMI .)
    INT             reduce using rule 5 (stmt -> RETURN expr SEMI .)
    RETURN          reduce using rule 5 (stmt -> RETURN expr SEMI .)


state 19

    (6) expr -> expr PLUS . expr
    (6) expr -> . expr PLUS expr
    (7) expr -> . expr MINUS expr
    (8) expr -> . NUMBER
    (9) expr -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expr                           shift and go to state 22

state 20

    (7) expr -> expr MINUS . expr
    (6) expr -> . expr PLUS expr
    (7) expr -> . expr MINUS expr
    (8) expr -> . NUMBER
    (9) expr -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expr                           shift and go to state 23

state 21

    (4) stmt -> INT ID ASSIGN expr . SEMI
    (6) expr -> expr . PLUS expr
    (7) expr -> expr . MINUS expr

    SEMI            shift and go to state 24
    PLUS            shift and go to state 19
    MINUS           shift and go to state 20


state 22

    (6) expr -> expr PLUS expr .
    (6) expr -> expr . PLUS expr
    (7) expr -> expr . MINUS expr

    SEMI            reduce using rule 6 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 6 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 6 (expr -> expr PLUS expr .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 23

    (7) expr -> expr MINUS expr .
    (6) expr -> expr . PLUS expr
    (7) expr -> expr . MINUS expr

    SEMI            reduce using rule 7 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 7 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 7 (expr -> expr MINUS expr .)

  ! PLUS            [ shift and go to state 19 ]
  ! MINUS           [ shift and go to state 20 ]


state 24

    (4) stmt -> INT ID ASSIGN expr SEMI .

    RBRACE          reduce using rule 4 (stmt -> INT ID ASSIGN expr SEMI .)
    INT             reduce using rule 4 (stmt -> INT ID ASSIGN expr SEMI .)
    RETURN          reduce using rule 4 (stmt -> INT ID ASSIGN expr SEMI .)

